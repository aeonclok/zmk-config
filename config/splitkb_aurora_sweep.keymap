/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define BASE 0
#define BASE_MAC 1


#define AS(keycode) &as LS(keycode) keycode

#define KEYS_L 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24
#define KEYS_R 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29
#define KEYS_T 30 31 32 34  

#define COMBO_TERM_FAST 35
#define COMBO_TERM_SLOW 50
#define COMBO_GLOBAL_QUICKTAP 100

#define HM_TAPPING_TERM 300
#define HM_TAPPING_TERM_FAST 200


#define MACRO(_name_, _bindings_)          \
_name_: _name_##_macro {                   \
    compatible     = "zmk,behavior-macro"; \
    #binding-cells = <0>;                  \
    tap-ms         = <1>;                  \
    wait-ms        = <1>;                  \
    bindings       = <_bindings_>;         \
};

/ {
    macros {
        MACRO(backtick,  &kp LS(EQUAL) &kp SPACE)
    };
};

/ {


// 0  1  2  3  4    5  6  7  8  9
// 10 11 12 13 14   15 16 17 18 19
// 20 21 22 23 24   25 26 27 28 29
//          30 31   32 33 



    combos {
        compatible = "zmk,combos";

        combo_dollar {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_GLOBAL_QUICKTAP>;
            key-positions = <23 24>;
            layers = <BASE BASE_MAC>;
            bindings = <&kp RA(NUMBER_4)>;
        };

        combo_backtick {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_GLOBAL_QUICKTAP>;
            key-positions = <8 9>;
            layers = <BASE BASE_MAC>;
            bindings = <&backtick>;
        };

        combo_tilde {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_GLOBAL_QUICKTAP>;
            key-positions = <21 22>;
            layers = <BASE BASE_MAC>;
            bindings = <&kp RA(RIGHT_BRACKET)>;
        };

        combo_percent {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_GLOBAL_QUICKTAP>;
            key-positions = <20 21>;
            layers = <BASE BASE_MAC>;
            bindings = <&kp LS(NUMBER_5)>;
        };

        combo_toggle_win_mac {
            timeout-ms = <COMBO_TERM_SLOW>;
            key-positions = <30 31 32 33>;
            layers = <BASE BASE_MAC>;
            bindings = <&tog BASE_MAC>;
        };

        combo_esc {
            timeout-ms = <COMBO_TERM_SLOW>;
            key-positions = <0 1>;
            layers = <BASE BASE_MAC>;
            bindings = <&kp ESC>;
        };

        combo_question {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_GLOBAL_QUICKTAP>;
            key-positions = <17 18>;
            layers = <BASE BASE_MAC>;
            bindings = <&kp LS(MINUS)>;
        };

        combo_and {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_GLOBAL_QUICKTAP>;
            key-positions = <25 26>;
            layers = <BASE BASE_MAC>;
            bindings = <&kp LS(NUMBER_6)>;
        };

        combo_equals {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_GLOBAL_QUICKTAP>;
            key-positions = <10 11>;
            layers = <BASE BASE_MAC>;
            bindings = <&kp LS(NUMBER_0)>;
        };

        combo_hashtag {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_GLOBAL_QUICKTAP>;
            key-positions = <5 6>;
            layers = <BASE BASE_MAC>;
            bindings = <&kp LS(NUMBER_3)>;
        };

        combo_euro_mac {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_GLOBAL_QUICKTAP>;
            key-positions = <3 4>;
            layers = <BASE_MAC>;
            bindings = <&kp LS(NUMBER_4)>;
        };

        combo_euro_win {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_GLOBAL_QUICKTAP>;
            key-positions = <3 4>;
            layers = <BASE>;
            bindings = <&kp LA(E)>;
        };

        combo_exclamation {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_GLOBAL_QUICKTAP>;
            key-positions = <11 12>;
            layers = <BASE BASE_MAC>;
            bindings = <&kp LS(NUMBER_1)>;
        };

        combo_minus {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_GLOBAL_QUICKTAP>;
            key-positions = <28 29>;
            layers = <BASE BASE_MAC>;
            bindings = <&kp SLASH>;
        };

        combo_plus {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_GLOBAL_QUICKTAP>;
            key-positions = <27 28>;
            layers = <BASE BASE_MAC>;
            bindings = <&kp MINUS>;
        };

        combo_at {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_GLOBAL_QUICKTAP>;
            key-positions = <1 2>;
            layers = <BASE BASE_MAC>;
            bindings = <&kp RA(NUMBER_2)>;
        };

        combo_doublequote {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_GLOBAL_QUICKTAP>;
            key-positions = <16 7>;
            layers = <BASE BASE_MAC>;
            bindings = <&kp LS(NUMBER_2)>;
        };

        combo_singlequote {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_GLOBAL_QUICKTAP>;
            key-positions = <18 19>;
            layers = <BASE BASE_MAC>;
            bindings = <&kp BACKSLASH>;
        };

        combo_slash {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_GLOBAL_QUICKTAP>;
            key-positions = <7 8>;
            layers = <BASE BASE_MAC>;
            bindings = <&kp LS(NUMBER_7)>;
        };

        combo_bracket_round_l {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_GLOBAL_QUICKTAP>;
            layers = <BASE BASE_MAC>;
            key-positions = <12 13>;
            bindings = <&kp LS(NUMBER_8)>;
        };

        combo_bracket_round_r {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_GLOBAL_QUICKTAP>;
            layers = <BASE BASE_MAC>;
            key-positions = <16 17>;
            bindings = <&kp LS(NUMBER_9)>;
        };

        combo_bracket_square_l {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_GLOBAL_QUICKTAP>;
            layers = <BASE BASE_MAC>;
            key-positions = <22 23>;
            bindings = <&kp RA(NUMBER_8)>;
        };

        combo_bracket_square_r {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_GLOBAL_QUICKTAP>;
            layers = <BASE BASE_MAC>;
            key-positions = <26 27>;
            bindings = <&kp RA(NUMBER_9)>;
        };

        combo_bracket_curly_l_mac {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_GLOBAL_QUICKTAP>;
            layers = <BASE_MAC>;
            key-positions = <2 3>;
            bindings = <&kp LA(LS(NUMBER_8))>;
        };

        combo_bracket_curly_r_mac {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_GLOBAL_QUICKTAP>;
            layers = <BASE_MAC>;
            key-positions = <6 7>;
            bindings = <&kp LA(LS(NUMBER_9))>;
        };
        combo_bracket_curly_l_win {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_GLOBAL_QUICKTAP>;
            layers = <BASE>;
            key-positions = <2 3>;
            bindings = <&kp RA(NUMBER_7)>;
        };

        combo_bracket_curly_r_win {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_GLOBAL_QUICKTAP>;
            layers = <BASE>;
            key-positions = <6 7>;
            bindings = <&kp RA(NUMBER_0)>;
        };

        combo_bracket_angled_l_win {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_GLOBAL_QUICKTAP>;
            layers = <BASE>;
            key-positions = <13 14>;
            bindings = <&kp NON_US_BSLH>;
        };

        combo_bracket_angled_r_win {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_GLOBAL_QUICKTAP>;
            layers = <BASE>;
            key-positions = <15 16>;
            bindings = <&kp LS(NON_US_BSLH)>;
        };

        combo_bracket_angled_l_mac {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_GLOBAL_QUICKTAP>;
            layers = <BASE_MAC>;
            key-positions = <13 14>;
            bindings = <&kp GRAVE>;
        };

        combo_bracket_angled_r_mac {
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_GLOBAL_QUICKTAP>;
            layers = <BASE_MAC>;
            key-positions = <15 16>;
            bindings = <&kp LS(GRAVE)>;
        };
    };

    behaviors {

        // Positional Homerow mods
        // Homerow mods that prevent accidental activations when rolling keys,
        // such as when typing `st` or `ne` on colemak-dh layouts or `as` on
        // qwerty.
        //
        // Works by only allowing a mod to activate within tapping-term if
        // it's on the opposite side of the keyboard or on the same side thumb
        // keys.

        // Further optimization using urob's timerless homerow mods method:
        // https://github.com/urob/zmk-config#timeless-homerow-mods
        hm_l: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>,  <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <175>;                // repeat on tap-into-hold
            require-prior-idle-ms = <150>;         // requires PR #1387
            hold-trigger-key-positions = <KEYS_R KEYS_T>;
            hold-trigger-on-release;             // requires PR #1423
        };

        hm_r: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick_tap_ms = <175>;
            require-prior-idle-ms = <150>;         // requires PR #1387
            hold-trigger-key-positions = <KEYS_L KEYS_T>;
            hold-trigger-on-release;             // requires PR #1423
        };


        // Positional Homerow mods for shift
        // Use faster tapping term and disable some features that may
        // cause false negatives.
        hm_ls: hm_ls {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM_FAST>;
            quick_tap_ms = <175>;
            // require-prior-idle-ms = <150>;         // requires PR #1387
            hold-trigger-key-positions = <KEYS_R KEYS_T>;
            // hold-trigger-on-release;             // requires PR #1423
        };

        hm_rs: hm_rs {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM_FAST>;
            quick_tap_ms = <175>;
            // require-prior-idle-ms = <150>;         // requires PR #1387
            hold-trigger-key-positions = <KEYS_L KEYS_T>;
            // hold-trigger-on-release;             // requires PR #1423
        };

        /*
         * Non-Positional Homerow Mods
         * Used for &mm_grescm_gui behavior on left hand.
         *
         * Usage: &hm LSHFT T
         * Tap: T
         * Tap-Tap-Hold: Repeat T
         * Hold: LSHIFT
         */
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick_tap_ms = <200>;
        };
    };

    // 
    // 
    //      esc   @    {     €          #    }    /   ` 
    //                                       "
    //      =     !    (     <          >    )    ?   '*
    //
    //      %     ~    [     $          &    ]   +\   -_
    //
    // 
    //      CTRL ALT SHIFT                 SHIFT ALT CTRL    
    // 
    //                TAB    <-         SPACE ENTER
    // 


    keymap {
                compatible = "zmk,keymap";

       	default_layer_win{
		bindings = <
        // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮    ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
                &kp Q     &hm_l RALT D     &kp J           &kp P       &kp G 				&kp F        &kp R         &kp U      &hm_r RALT Y    &kp SEMI 
		// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
            &hm_l LCTRL A  &hm_l LALT L &hm_l LGUI S  &hm_ls LSHFT T   &kp K             &kp H      &hm_rs RSHFT N  &hm_r RGUI E  &hm_r LALT I &hm_r RCTRL O
		// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
		      &kp Z           &kp X           &kp C       &kp V           &kp B				&kp W       &kp M        &kp SQT       &kp DOT       &kp COMMA
		// ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────╯
          			                                    &lt 2 TAB     &lt 2 BSPC  		 &lt 3 SPACE     &lt 3 RET	
        //                                           ╰─────────────┼─────────────┤    ├─────────────┼─────────────╯
		>;
		};       	
        
        default_layer_mac {
		bindings = <
        // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮    ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
                &kp Q     &hm_l RALT D      &kp J           &kp P       &kp G 				&kp F        &kp R         &kp U     &hm_r RALT Y   &kp SEMI 
		// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
            &hm_l LCTRL A  &hm_l LALT L &hm_l LGUI S  &hm_ls LSHFT T   &kp K             &kp H      &hm_rs RSHFT N  &hm_r RGUI E  &hm_r LALT I &hm_r RCTRL O
		// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
		      &kp Z           &kp X           &kp C       &kp V           &kp B				&kp W       &kp M        &kp SQT       &kp DOT       &kp COMMA
		// ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────╯
          			                                    &lt 2 TAB     &lt 2 BSPC  		 &lt 3 SPACE     &lt 3 RET	
        //                                           ╰─────────────┼─────────────┤    ├─────────────┼─────────────╯
		>;
		};

       	left_layer {
		bindings = <
        // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮    ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
		       &kp N1         &kp N2        &kp N3       &kp N4        &kp N5              &kp N6        &kp N7        &kp N8        &kp N9       &kp N0
		// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
		   &hm_l LCTRL N1 &hm_l LALT N2 &hm_l LGUI N3 &hm_ls LSHFT N4     &kp N5           &kp N6   &hm_rs RSHFT N7 &hm_r RGUI N8 &hm_r LALT N9 &hm_r RCTRL N0
		// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
               &trans         &trans        &trans       &trans        &trans            &trans         &trans          &trans         &trans      &trans
		// ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────╯
					                                     &mo 2         &kp LGUI  		  &kp RGUI       &mo 4 
        //                                           ╰─────────────┼─────────────┤    ├─────────────┼─────────────╯
		>;
		};

		right_layer {
		bindings = <
        // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮    ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
		       &trans         &trans        &trans       &trans        &trans              &trans       &trans        &kp UP        &trans        &trans
		// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
               &trans         &trans        &trans       &trans        &trans              &trans       &kp LEFT      &kp DOWN     &kp RIGHT       &trans
		// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
               &trans         &trans        &trans       &trans        &trans              &trans       &trans        &trans        &trans        &trans
		// ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────╯
					                                      &mo 4       &kp LCTRL  		   &kp SPACE       &mo 3 
        //                                           ╰─────────────┼─────────────┤    ├─────────────┼─────────────╯
		>;
		};	

		tri_layer {
		bindings = <
        // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮    ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
		        &kp N1   &kp N2     &kp N3    &kp N4    &kp N5 			&bt BT_SEL 1 &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_SEL 5
		// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
		        &kp F1      &kp F2          &kp F3      &kp F4         &kp F5  			   &trans       &kp PG_UP  &kp K_VOL_UP    &kp K_MUTE     &trans 
		// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
		      &bt BT_CLR    &bt BT_NXT   &bt BT_PRV     &kp F6         &kp F7   		   &trans       &kp PG_DN  &kp K_VOL_DN     &trans        &trans   
		// ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────╯
					                                    &trans         &trans  		       &trans       &trans 
        //                                           ╰─────────────┼─────────────┤    ├─────────────┼─────────────╯
		>;
		};	
        
	};
};
