/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */


#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <behaviors/num_word.dtsi> // requires auto-layer module

#include "zmk-helpers/helper.h"

#define WIN 0
#define MAC 1
#define NUM 2

#define AS(keycode) &as LS(keycode) keycode

#define KEYS_L 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24
#define KEYS_R 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29
#define KEYS_T 30 31 32 34  

#define COMBO_TERM_FAST 35
#define COMBO_TERM_SLOW 50
#define COMBO_GLOBAL_QUICKTAP 100

#define HM_TAPPING_TERM 300
#define HM_TAPPING_TERM_FAST 200

#define MACRO(_name_, _bindings_)          \
_name_: _name_##_macro {                   \
    compatible     = "zmk,behavior-macro"; \
    #binding-cells = <0>;                  \
    tap-ms         = <1>;                  \
    wait-ms        = <1>;                  \
    bindings       = <_bindings_>;         \
};

/ {
    macros {
        MACRO(backtick,  &kp LS(EQUAL) &kp SPACE)
        MACRO(caret,  &kp LS(RIGHT_BRACKET) &kp SPACE) 
        MACRO(tilde, &kp RA(RIGHT_BRACKET) &kp SPACE)
    };
};

#define MODMORPH(_name_, _bindings_, _bindings_shift_)               \
_name_: _name_##_modmorph {                                          \
    compatible = "zmk,behavior-mod-morph";                           \
    #binding-cells = <0>;                                            \
    bindings = <_bindings_>, <_bindings_shift_>;                     \
    mods = <(MOD_LSFT | MOD_RSFT)>;                                  \
};

#define COMBO(_name_, _key_positions_, _layers_, _bindings_)    \
combo_##_name_ {                                                \
    timeout-ms            = <COMBO_TERM_FAST>;                  \
    require-prior-idle-ms = <COMBO_GLOBAL_QUICKTAP>;            \
    bindings              = <_bindings_>;                       \
    key-positions         = <_key_positions_>;                  \
    layers                = <_layers_>;                         \
};

#define SMART_NUM &smart_num NUM 0
ZMK_HOLD_TAP(smart_num,
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <175>;
    bindings = <&mo>, <&num_dance>;
)
ZMK_TAP_DANCE(num_dance,
    tapping-term-ms = <200>;
    bindings = <&num_word NUM>, <&sl NUM>;  // reverse this for sticky-num on single tap
)


// positional homerow mods
// homerow mods that prevent accidental activations when rolling keys,
// such as when typing `st` or `ne` on colemak-dh layouts or `as` on
// qwerty.
//
// works by only allowing a mod to activate within tapping-term if
// it's on the opposite side of the keyboard or on the same side thumb
// keys.
#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_HOLD_TAP(NAME, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <175> \
        require-prior-idle-ms = <150>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )
MAKE_HRM(hm_l, &kp, &kp, KEYS_R KEYS_T)  // left-hand hrms
MAKE_HRM(hm_r, &kp, &kp, KEYS_L KEYS_T)  // right-hand hrms

/ { 

// 0  1  2  3  4    5  6  7  8  9
// 10 11 12 13 14   15 16 17 18 19
// 20 21 22 23 24   25 26 27 28 29
//          30 31   32 33 

    combos {
        compatible = "zmk,combos";

        combo(brackets_curly_mac, 2 3, mac, &mod_brackets_curly_mac)
        combo(brackets_curly_win, 2 3, win, &mod_brackets_curly_mac)
        combo(brackets_round, 12 13, win mac, &mod_brackets_round)
        combo(brackets_square, 22 23, win mac, &mod_brackets_square)
        combo(brackets_angled_mac, 13 14, mac, &mod_brackets_angled_mac)
        combo(brackets_angled_win, 13 14, win, &mod_brackets_angled_win)
        combo(backspace_delete, 6 7, win mac, &mod_bspc_del)

        combo(toggle_win_mac, 30 31 32 33, win mac, &tog mac)
        combo(old_esc, 0 1, win mac, &trans)
        combo(esc, 2 11, win mac, &kp esc)
        combo(enter, 26 17, win mac, &kp ret)
        combo(tab, 2 13, win mac, &kp tab)
        combo(question, 17 18, win mac, &kp ls(minus))
        combo(colon, 17 28, win mac, &kp ls(dot))
        combo(and, 25 26, win mac, &kp ls(number_6))
        combo(equals, 10 11, win mac, &kp ls(number_0))
        combo(hashtag, 5 6, win mac, &kp ls(number_3))
        combo(euro_mac, 3 4, mac, &kp ls(number_4))
        combo(euro_win, 3 4, win, &kp ra(e))
        combo(pipe_mac, 7 18, mac, &kp ra(number_7))
        combo(pipe_win, 7 18, win, &kp ra(non_us_bslh))
        combo(exclamation, 11 12, win mac, &kp ls(number_1))
        combo(minus, 28 29, win mac, &kp slash)
        combo(plus, 27 28, win mac, &kp minus)
        combo(at, 1 2, win mac, &kp ra(number_2))
        combo(doublequote, 16 7, win mac, &kp ls(number_2))
        combo(singlequote, 18 19, win mac, &kp backslash)
        combo(slash, 7 8, win mac, &kp ls(number_7))
        combo(backslash_mac, 17 8, mac, &kp ra(ls(number_7)))
        combo(backslash_win, 17 8, win, &kp ra(minus))
        combo(caret, 15 6, win mac, &caret)
        combo(dollar, 23 24, win mac, &kp ra(number_4))  
        combo(backtick, 8 9, win mac, &backtick)
        combo(tilde, 21 22, win mac, &tilde)
        combo(percent, 20 21, win mac, &kp ls(number_5))
    };

    behaviors {
        lt_bspc_del: layer_tap_backspace_delete {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            //quick-tap-ms = <0>;
            //flavor = "tap-preferred";
            bindings = <&mo>, <&mod_bspc_del>;
        };
        modmorph(mod_brackets_curly_mac, &kp ra(rs(number_8)), &kp ra(rs(number_9)))
        modmorph(mod_brackets_curly_win, &kp ra(number_7), &kp ra(number_0))
        modmorph(modc_brackets_round, &kp ls(number_8), &kp ls(number_9))
        modmorph(mod_brackets_square, &kp ra(number_8), &kp ra(number_9))
        modmorph(mod_brackets_angled_win, &kp non_us_bslh, &kp ls(non_us_bslh))
        modmorph(mod_brackets_angled_mac, &kp grave, &kp ls(grave))
        modmorph(mod_bspc_del, &kp backspace, &kp delete)

        // positional homerow mods for shift
        // Use faster tapping term and disable some features that may
        // cause false negatives.
        hm_ls: hm_ls {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>,  <&kp>;
            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM_FAST>;
            quick_tap_ms = <175>;
            // require-prior-idle-ms = <150>;         // requires PR #1387
            hold-trigger-key-positions = <KEYS_R KEYS_T>;
            // hold-trigger-on-release;             // requires PR #1423
        };

        hm_rs: hm_rs {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>,  <&kp>;
            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM_FAST>;
            quick_tap_ms = <175>;
            // require-prior-idle-ms = <150>;         // requires PR #1387
            hold-trigger-key-positions = <KEYS_L KEYS_T>;
            // hold-trigger-on-release;             // requires PR #1423
        };

        /*
         * Non-Positional Homerow Mods
         * Used for &mm_grescm_gui behavior on left hand.
         *
         * Usage: &hm LSHFT T
         * Tap: T
         * Tap-Tap-Hold: Repeat T
         * Hold: LSHIFT
         */
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>,  <&kp>;
            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick_tap_ms = <200>;
        };
    };

// 
// 
//      COMBOS:
// 
//      esc   @    {     €          #    }    /   " 
//      =     !    (     <          >    )    ?   '*
//      %     ~    [     $          &    ]   +\   -_
// 
//      Home Row Mods:
//
//      CTRL ALT SHIFT                 SHIFT ALT CTRL    
// 
// 
//      DEFAULT LAYER:
// 
//      Q   D   J   P   G        F   R   U   Y   Ö 
//      A   L   S   T   K        H   N   E   I   O 
//      Z   X   C   V   B        W   M   Ä  .:  ,;
//                 TAB   <-   SPACE ENTER
// 
// 

    keymap {
                compatible = "zmk,keymap";

    default_layer_win{
    bindings = <
    // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮    ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
              &kp Q     &hm_l RALT D     &kp J           &kp P       &kp G        &kp F        &kp R         &kp U      &hm_r RALT Y    &kp SEMI 
    // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
        &hm_l LCTRL A  &hm_l LALT L &hm_l LGUI S  &hm_ls LSHFT T   &kp K             &kp H      &hm_rs RSHFT N  &hm_r RGUI E  &hm_r LALT I &hm_r RCTRL O
    // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
            &kp Z           &kp X           &kp C       &kp V           &kp B       &kp W       &kp M        &kp SQT       &kp DOT       &kp COMMA
    // ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────╯
                                                    &lt 2 TAB   SMART_NUM          &lt 3 SPACE     &lt 3 RET  
    //                                           ╰─────────────┼─────────────┤    ├─────────────┼─────────────╯
    >;
    };        
        
        default_layer_mac {
    bindings = <
    // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮    ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
              &kp Q     &hm_l RALT D      &kp J           &kp P       &kp G         &kp F        &kp R         &kp U     &hm_r RALT Y   &kp SEMI 
    // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
        &hm_l LCTRL A  &hm_l LALT L &hm_l LGUI S  &hm_ls LSHFT T   &kp K             &kp H      &hm_rs RSHFT N  &hm_r RGUI E  &hm_r LALT I &hm_r RCTRL O
    // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
          &kp Z           &kp X           &kp C       &kp V           &kp B       &kp W       &kp M        &kp SQT       &kp DOT       &kp COMMA
    // ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────╯
                                                    &lt 2 TAB   SMART_NUM          &lt 3 SPACE     &lt 3 RET 
    //                                           ╰─────────────┼─────────────┤    ├─────────────┼─────────────╯
    >;
    };

    left_layer {
    bindings = <
    // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮    ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
           &kp F7         &kp F5        &kp F3       &kp F1         &kp F9             &kp F8        &kp F10        &kp F2        &kp F4       &kp F6
    // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
       &hm_l LCTRL N7 &hm_l LALT N5 &hm_l LGUI N3 &hm_ls LSHFT N1   &trans            &trans   &hm_rs RSHFT N0 &hm_r RGUI N2 &hm_r LALT N4 &hm_r RCTRL N6
    // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
               &trans         &trans        &trans       &kp N9         &trans            &trans         &kp N8       &trans         &trans      &trans
    // ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────╯
                                                    &mo 2         &trans          &kp SPACE       &lt 4 RET 
    //                                           ╰─────────────┼─────────────┤    ├─────────────┼─────────────╯
    >;
    };

    right_layer {
    bindings = <
    // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮    ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
           &trans         &trans        &trans       &trans        &trans              &trans       &trans        &kp UP        &trans        &trans
    // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
          &trans         &trans        &trans       &trans        &trans              &trans       &kp LEFT      &kp DOWN     &kp RIGHT       &trans
    // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
          &trans         &trans        &trans       &trans        &trans              &trans       &kp PAGE_UP    &trans     &kp PAGE_DOWN     &trans
    // ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────╯
                                                        &mo 4       &kp LCTRL        &kp SPACE       &mo 3 
    //                                           ╰─────────────┼─────────────┤    ├─────────────┼─────────────╯
    >;
    };  

    tri_layer {
    bindings = <
        // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮    ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
            &kp N1   &kp N2     &kp N3    &kp N4    &kp N5      &bt BT_SEL 1 &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_SEL 5
    // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
            &kp F1      &kp F2          &kp F3      &kp F4         &kp F5          &trans       &kp PG_UP  &kp K_VOL_UP    &kp K_MUTE     &trans 
    // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
          &bt BT_CLR    &bt BT_NXT   &bt BT_PRV     &kp F6         &kp F7          &trans       &kp PG_DN  &kp K_VOL_DN     &trans        &trans   
    // ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────╯
                                              &trans         &trans            &trans       &trans 
        //                                           ╰─────────────┼─────────────┤    ├─────────────┼─────────────╯
    >;
    };  
        
  };
};
