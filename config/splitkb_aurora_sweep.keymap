/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

// TODO:
// Add Del
// Add function keys
// Switch back to main ZMK repository from urob
//     See if homerow mods config needs updating


#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define WIN 0
#define MAC 1

#define AS(keycode) &as LS(keycode) keycode

#define KEYS_L 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24
#define KEYS_R 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29
#define KEYS_T 30 31 32 34  

#define COMBO_TERM_FAST 35
#define COMBO_TERM_SLOW 50
#define COMBO_GLOBAL_QUICKTAP 100

#define HM_TAPPING_TERM 300
#define HM_TAPPING_TERM_FAST 200

#define MACRO(_name_, _bindings_)          \
_name_: _name_##_macro {                   \
    compatible     = "zmk,behavior-macro"; \
    #binding-cells = <0>;                  \
    tap-ms         = <1>;                  \
    wait-ms        = <1>;                  \
    bindings       = <_bindings_>;         \
};

/ {
    macros {
        MACRO(backtick,  &kp LS(EQUAL) &kp SPACE)
        MACRO(caret,  &kp LS(RIGHT_BRACKET) &kp SPACE) 
        MACRO(tilde, &kp RA(RIGHT_BRACKET) &kp SPACE)
    };
};

#define COMBO(_name_, _key_positions_, _layers_, _bindings_)    \
combo_##_name_ {                                                \
    timeout-ms            = <COMBO_TERM_FAST>;                  \
    require-prior-idle-ms = <COMBO_GLOBAL_QUICKTAP>;            \
    bindings              = <_bindings_>;                       \
    key-positions         = <_key_positions_>;                  \
    layers                = <_layers_>;                         \
};

/ { 

// 0  1  2  3  4    5  6  7  8  9
// 10 11 12 13 14   15 16 17 18 19
// 20 21 22 23 24   25 26 27 28 29
//          30 31   32 33 




    combos {
        compatible = "zmk,combos";
        COMBO(toggle_win_mac, 30 31 32 33, WIN MAC, &tog MAC)
        COMBO(esc, 0 1, WIN MAC, &kp ESC)
        COMBO(esc_second, 2 11, WIN MAC, &kp ESC)
        COMBO(question, 17 18, WIN MAC, &kp LS(MINUS))
        COMBO(colon, 17 28, WIN MAC, &kp LS(DOT))
        COMBO(and, 25 26, WIN MAC, &kp LS(NUMBER_6))
        COMBO(equals, 10 11, WIN MAC, &kp LS(NUMBER_0))
        COMBO(hashtag, 5 6, WIN MAC, &kp LS(NUMBER_3))
        COMBO(euro_mac, 3 4, MAC, &kp LS(NUMBER_4))
        COMBO(euro_win, 3 4, WIN, &kp LA(E))
        COMBO(exclamation, 11 12, WIN MAC, &kp LS(NUMBER_1))
        COMBO(minus, 28 29, WIN MAC, &kp SLASH)
        COMBO(plus, 27 28, WIN MAC, &kp MINUS)
        COMBO(at, 1 2, WIN MAC, &kp RA(NUMBER_2))
        COMBO(doublequote, 16 7, WIN MAC, &kp LS(NUMBER_2))
        COMBO(singlequote, 18 19, WIN MAC, &kp BACKSLASH)
        COMBO(slash, 7 8, WIN MAC, &kp LS(NUMBER_7))
        COMBO(backslash_mac, 17 8, MAC, &kp LA(LS(NUMBER_7)))
        COMBO(backslash_win, 17 8, WIN, &kp LA(MINUS))
        COMBO(bracket_round_l, 12 13, WIN MAC, &kp LS(NUMBER_8))
        COMBO(bracket_round_r, 16 17, WIN MAC, &kp LS(NUMBER_9))
        COMBO(bracket_square_l, 22 23, WIN MAC, &kp RA(NUMBER_8))
        COMBO(bracket_square_r, 26 27, WIN MAC, &kp RA(NUMBER_9))
        COMBO(bracket_curly_l_mac, 2 3, MAC, &kp LA(LS(NUMBER_8)))
        COMBO(bracket_curly_r_mac, 6 7, MAC, &kp LA(LS(NUMBER_9)))
        COMBO(bracket_curly_l_win, 2 3, WIN, &kp RA(NUMBER_7))
        COMBO(bracket_curly_r_win, 6 7, WIN, &kp RA(NUMBER_0))
        COMBO(bracket_angled_l_win, 13 14, WIN, &kp NON_US_BSLH)
        COMBO(bracket_angled_r_win, 15 16, WIN, &kp LS(NON_US_BSLH))
        COMBO(bracket_angled_l_mac, 13 14, MAC, &kp GRAVE)
        COMBO(bracket_angled_r_mac, 15 16, MAC, &kp LS(GRAVE))
        COMBO(pipe_mac, 7 18, MAC, &kp RA(NUMBER_7))
        COMBO(pipe_win, 7 18, WIN, &kp RA(NON_US_BSLH))
        COMBO(caret, 15 6, WIN MAC, &caret)
        COMBO(dollar, 23 24, WIN MAC, &kp RA(NUMBER_4))  
        COMBO(backtick, 8 9, WIN MAC, &backtick)
        COMBO(tilde, 21 22, WIN MAC, &tilde)
        COMBO(percent, 20 21, WIN MAC, &kp LS(NUMBER_5))
    };

    behaviors {

        // Positional Homerow mods
        // Homerow mods that prevent accidental activations when rolling keys,
        // such as when typing `st` or `ne` on colemak-dh layouts or `as` on
        // qwerty.
        //
        // Works by only allowing a mod to activate within tapping-term if
        // it's on the opposite side of the keyboard or on the same side thumb
        // keys.

        // Further optimization using urob's timerless homerow mods method:
        // https://github.com/urob/zmk-config#timeless-homerow-mods
        hm_l: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>,  <&kp>;
            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <175>;                // repeat on tap-into-hold
            require-prior-idle-ms = <150>;         // requires PR #1387
            hold-trigger-key-positions = <KEYS_R KEYS_T>;
            hold-trigger-on-release;             // requires PR #1423
        };

        hm_r: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>,  <&kp>;
            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick_tap_ms = <175>;
            require-prior-idle-ms = <150>;         // requires PR #1387
            hold-trigger-key-positions = <KEYS_L KEYS_T>;
            hold-trigger-on-release;             // requires PR #1423
        };


        // Positional Homerow mods for shift
        // Use faster tapping term and disable some features that may
        // cause false negatives.
        hm_ls: hm_ls {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>,  <&kp>;
            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM_FAST>;
            quick_tap_ms = <175>;
            // require-prior-idle-ms = <150>;         // requires PR #1387
            hold-trigger-key-positions = <KEYS_R KEYS_T>;
            // hold-trigger-on-release;             // requires PR #1423
        };

        hm_rs: hm_rs {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>,  <&kp>;
            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM_FAST>;
            quick_tap_ms = <175>;
            // require-prior-idle-ms = <150>;         // requires PR #1387
            hold-trigger-key-positions = <KEYS_L KEYS_T>;
            // hold-trigger-on-release;             // requires PR #1423
        };

        /*
         * Non-Positional Homerow Mods
         * Used for &mm_grescm_gui behavior on left hand.
         *
         * Usage: &hm LSHFT T
         * Tap: T
         * Tap-Tap-Hold: Repeat T
         * Hold: LSHIFT
         */
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>,  <&kp>;
            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick_tap_ms = <200>;
        };
    };


// 
// 
//      COMBOS:
// 
//      esc   @    {     €          #    }    /   " 
//      =     !    (     <          >    )    ?   '*
//      %     ~    [     $          &    ]   +\   -_
// 
//      Home Row Mods:
//
//      CTRL ALT SHIFT                 SHIFT ALT CTRL    
// 
// 
//      DEFAULT LAYER:
// 
//      Q   D   J   P   G        F   R   U   Y   Ö 
//      A   L   S   T   K        H   N   E   I   O 
//      Z   X   C   V   B        W   M   Ä  .:  ,;
//                 TAB   <-   SPACE ENTER
// 
// 
//      DEFAULT LAYER:
// 
//      Q   D   J   P   G        F   R   U   Y   Ö 
//      A   L   S   T   K        H   N   E   I   O 
//      Z   X   C   V   B        W   M   Ä  .:  ,;
//                 TAB   <-   SPACE ENTER
// 
// 
//      LEFT LAYER:
// 
//      1   2   3   4   5        6   7   8   9   0 
//      1   2   3   4   5        6   7   8   9   0
//      -   -   -   -   -        -   -   -   -   -
//                 2L  LGUI     RGUI 4L
// 
// 
//         
// 




    keymap {
                compatible = "zmk,keymap";

       	default_layer_win{
		bindings = <
        // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮    ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
                &kp Q     &hm_l RALT D     &kp J           &kp P       &kp G 				&kp F        &kp R         &kp U      &hm_r RALT Y    &kp SEMI 
		// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
            &hm_l LCTRL A  &hm_l LALT L &hm_l LGUI S  &hm_ls LSHFT T   &kp K             &kp H      &hm_rs RSHFT N  &hm_r RGUI E  &hm_r LALT I &hm_r RCTRL O
		// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
		      &kp Z           &kp X           &kp C       &kp V           &kp B				&kp W       &kp M        &kp SQT       &kp DOT       &kp COMMA
		// ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────╯
          			                                    &lt 2 TAB     &lt 2 BSPC  		 &lt 3 SPACE     &lt 3 RET	
        //                                           ╰─────────────┼─────────────┤    ├─────────────┼─────────────╯
		>;
		};       	
        
        default_layer_mac {
		bindings = <
        // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮    ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
                &kp Q     &hm_l RALT D      &kp J           &kp P       &kp G 				&kp F        &kp R         &kp U     &hm_r RALT Y   &kp SEMI 
		// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
            &hm_l LCTRL A  &hm_l LALT L &hm_l LGUI S  &hm_ls LSHFT T   &kp K             &kp H      &hm_rs RSHFT N  &hm_r RGUI E  &hm_r LALT I &hm_r RCTRL O
		// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
		      &kp Z           &kp X           &kp C       &kp V           &kp B				&kp W       &kp M        &kp SQT       &kp DOT       &kp COMMA
		// ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────╯
          			                                    &lt 2 TAB     &lt 2 BSPC  		 &lt 3 SPACE     &lt 3 RET	
        //                                           ╰─────────────┼─────────────┤    ├─────────────┼─────────────╯
		>;
		};

       	left_layer {
		bindings = <
        // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮    ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
		       &kp N1         &kp N2        &kp N3       &kp N4        &kp N5              &kp N6        &kp N7        &kp N8        &kp N9       &kp N0
		// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
		   &hm_l LCTRL N1 &hm_l LALT N2 &hm_l LGUI N3 &hm_ls LSHFT N4     &kp N5           &kp N6   &hm_rs RSHFT N7 &hm_r RGUI N8 &hm_r LALT N9 &hm_r RCTRL N0
		// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
               &trans         &trans        &trans       &trans        &trans            &trans         &trans          &trans         &trans      &trans
		// ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────╯
					                                     &mo 2         &kp LGUI  		  &kp RGUI       &mo 4 
        //                                           ╰─────────────┼─────────────┤    ├─────────────┼─────────────╯
		>;
		};

		right_layer {
		bindings = <
        // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮    ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
		       &trans         &trans        &trans       &trans        &trans              &trans       &trans        &kp UP        &trans        &trans
		// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
               &trans         &trans        &trans       &trans        &trans              &trans       &kp LEFT      &kp DOWN     &kp RIGHT       &trans
		// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
               &trans         &trans        &trans       &trans        &trans              &trans       &trans        &trans        &trans        &trans
		// ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────╯
					                                      &mo 4       &kp LCTRL  		   &kp SPACE       &mo 3 
        //                                           ╰─────────────┼─────────────┤    ├─────────────┼─────────────╯
		>;
		};	

		tri_layer {
		bindings = <
        // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮    ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
		        &kp N1   &kp N2     &kp N3    &kp N4    &kp N5 			&bt BT_SEL 1 &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_SEL 5
		// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
		        &kp F1      &kp F2          &kp F3      &kp F4         &kp F5  			   &trans       &kp PG_UP  &kp K_VOL_UP    &kp K_MUTE     &trans 
		// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
		      &bt BT_CLR    &bt BT_NXT   &bt BT_PRV     &kp F6         &kp F7   		   &trans       &kp PG_DN  &kp K_VOL_DN     &trans        &trans   
		// ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────╯
					                                    &trans         &trans  		       &trans       &trans 
        //                                           ╰─────────────┼─────────────┤    ├─────────────┼─────────────╯
		>;
		};	
        
	};
};
