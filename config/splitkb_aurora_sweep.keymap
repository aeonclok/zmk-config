/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

// ┌─────┌─────┌─────┐   :set ve:all
// │     │     │     │   :VBox
// └─────└─────└─────┘

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <behaviors/num_word.dtsi> // requires auto-layer module

#include "zmk-helpers/helper.h"

#define WIN 0
#define MAC 1
#define NUM 2

#define AS(keycode) &as LS(keycode) keycode

#define KEYS_L 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24
#define KEYS_R 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29
#define KEYS_T 30 31 32 34  

#define COMBO_TERM_FAST 35
#define COMBO_TERM_SLOW 50
#define COMBO_GLOBAL_QUICKTAP 100

#define hmTAPPING_TERM 300
#define hmTAPPING_TERM_FAST 200

#define MACRO(_name_, _bindings_)          \
_name_: _name_##_macro {                   \
    compatible     = "zmk,behavior-macro"; \
    #binding-cells = <0>;                  \
    tap-ms         = <1>;                  \
    wait-ms        = <1>;                  \
    bindings       = <_bindings_>;         \
};

/ {
    macros {
        MACRO(backtick,  &kp LS(EQUAL) &kp SPACE)
        MACRO(caret,  &kp LS(RIGHT_BRACKET) &kp SPACE) 
        MACRO(tilde, &kp RA(RIGHT_BRACKET) &kp SPACE)
    };
};

#define MODMORPH(_name_, _bindings_, _bindings_shift_)               \
_name_: _name_##_modmorph {                                          \
    compatible = "zmk,behavior-mod-morph";                           \
    #binding-cells = <0>;                                            \
    bindings = <_bindings_>, <_bindings_shift_>;                     \
    mods = <(MOD_LSFT | MOD_RSFT)>;                                  \
};

#define COMBO(_name_, _bindings_, _key_positions_, _layers_)    \
combo_##_name_ {                                                \
    timeout-ms            = <COMBO_TERM_FAST>;                  \
    require-prior-idle-ms = <COMBO_GLOBAL_QUICKTAP>;            \
    bindings              = <_bindings_>;                       \
    key-positions         = <_key_positions_>;                  \
    layers                = <_layers_>;                         \
};

#define SMART_NUM &smart_num NUM 0
ZMK_HOLD_TAP(smart_num,
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <175>;
    bindings = <&mo>, <&num_dance>;
)
ZMK_TAP_DANCE(num_dance,
    tapping-term-ms = <200>;
    bindings = <&num_word NUM>, <&sl NUM>;  // reverse this for sticky-num on single tap
)

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \ 
    ZMK_HOLD_TAP(NAME, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <175>; \
        require-prior-idle-ms = <150>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )
MAKE_HRM(hml, &kp, &kp, KEYS_R KEYS_T)
MAKE_HRM(hmr, &kp, &kp, KEYS_L KEYS_T)

#define MAKE_HRMS(NAME, HOLD, TAP, TRIGGER_POS) \ 
    ZMK_HOLD_TAP(NAME, \
        flavor = "balanced"; \
        tapping-term-ms = <280>; \
        quick-tap-ms = <175>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
    )
MAKE_HRMS(hmls, &kp, &kp, KEYS_R KEYS_T)
MAKE_HRMS(hmrs, &kp, &kp, KEYS_L KEYS_T)

/ { 

// 0  1  2  3  4    5  6  7  8  9
// 10 11 12 13 14   15 16 17 18 19
// 20 21 22 23 24   25 26 27 28 29
//          30 31   32 33 
//  ZMK_COMBO(name, bindings, keypos, layers, timeout, prior_idle, extra)

//            @    {}    €          #   /  bs/del  "
//        esc  tab                    "      \
//      =     !    ()    <>                   ?   '*
//      %     ~    []    $          &        +\   -_
// 
    combos {
        compatible = "zmk,combos";

        COMBO(old_esc,          &trans,               0 1, WIN MAC)
        COMBO(at,               &kp RA(NUMBER_2),     1 2, WIN MAC)
        COMBO(br_curly_mac,     &mod_br_curly_mac,    2 3, MAC)
        COMBO(br_curly_win,     &mod_br_curly_mac,    2 3, WIN)
        COMBO(euro_mac,         &kp LS(NUMBER_4),     3 4, MAC)
        COMBO(euro_win,         &kp RA(E),            3 4, WIN)
        COMBO(hashtag,          &kp LS(NUMBER_3),     5 6, WIN MAC)
        COMBO(caret,            &caret,               15 6, WIN MAC)
        COMBO(doublequote,      &kp LS(NUMBER_2),     16 7, WIN MAC)
        COMBO(slash,            &kp LS(NUMBER_7),     6 7, WIN MAC)
        COMBO(backslash_mac,    &kp RA(LS(NUMBER_7)), 17 8, MAC)
        COMBO(backspace_delete, &mod_bspc_del,        7 8, WIN MAC)
        COMBO(backslash_win,    &kp RA(MINUS),        17 8, WIN)
        COMBO(backtick,         &backtick,            8 9, WIN MAC)
        COMBO(esc,              &kp ESC,              2 11, WIN MAC)
        COMBO(equals,           &kp LS(NUMBER_0),     10 11, WIN MAC)
        COMBO(exclamation,      &kp LS(NUMBER_1),     11 12, WIN MAC)
        COMBO(br_round,         &mod_br_round,        12 13, WIN MAC)
        COMBO(tab,              &kp TAB,              2 13, WIN MAC)
        COMBO(br_angled_mac,    &mod_br_angled_mac,   13 14, MAC)
        COMBO(br_angled_win,    &mod_br_angled_win,   13 14, WIN)
        COMBO(enter,            &kp RET,              26 17, WIN MAC)
        COMBO(pipe_mac,         &kp RA(NUMBER_7),     7 18, MAC)
        COMBO(question,         &kp LS(MINUS),        17 18, WIN MAC)
        COMBO(pipe_win,         &kp RA(NON_US_BSLH),  7 18, WIN)
        COMBO(singlequote,      &kp BACKSLASH,        18 19, WIN MAC)
        COMBO(percent,          &kp LS(NUMBER_5),     20 21, WIN MAC)
        COMBO(tilde,            &tilde,               21 22, WIN MAC)
        COMBO(br_square,        &mod_br_square,       22 23, WIN MAC)
        COMBO(dollar,           &kp RA(NUMBER_4),     23 24, WIN MAC)
        COMBO(and,              &kp LS(NUMBER_6),     25 26, WIN MAC)
        COMBO(colon,            &kp LS(DOT),          17 28, WIN MAC)
        COMBO(plus,             &kp MINUS,            27 28, WIN MAC)
        COMBO(minus,            &kp SLASH,            28 29, WIN MAC)
        COMBO(toggle_win_mac,   &tog MAC,             30 31 32 33, WIN MAC)
    };

    behaviors {
        lt_bspc_del: layer_tap_backspace_delete {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            //flavor = "tap-preferred";
            bindings = <&mo>, <&mod_bspc_del>;
        };
        MODMORPH(mod_br_curly_mac, &kp RA(RS(NUMBER_8)), &kp RA(RS(NUMBER_9)))
        MODMORPH(mod_br_curly_win, &kp RA(NUMBER_7), &kp RA(NUMBER_0))
        MODMORPH(mod_br_round, &kp LS(NUMBER_8), &kp LS(NUMBER_9))
        MODMORPH(mod_br_square, &kp RA(NUMBER_8), &kp RA(NUMBER_9))
        MODMORPH(mod_br_angled_win, &kp NON_US_BSLH, &kp LS(NON_US_BSLH))
        MODMORPH(mod_br_angled_mac, &kp GRAVE, &kp LS(GRAVE))
        MODMORPH(mod_bspc_del, &kp BACKSPACE, &kp DELETE)

    };

// 
// 
//      COMBOS:
// 
//            @    {}    €                    /   "
//        esc  tab   
//      =     !    ()    <>                   ?   '*
//      %     ~    []    $          &        +\   -_
// 
//      Home Row Mods:
//
//      CTRL ALT SHIFT                 SHIFT ALT CTRL    
// 
// 
//      DEFAULT LAYER:
// 
//      Q   D   J   P   G        F   R   U   Y   Ö 
//      A   L   S   T   K        H   N   E   I   O 
//      Z   X   C   V   B        W   M   Ä  .:  ,;
//                 TAB   <-   SPACE ENTER
// 
// 

    keymap {
    compatible = "zmk,keymap";

    default_layer_win{
    bindings = <
    // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮    ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
        &kp Q         &hml RALT D   &kp J         &kp P         &kp G              &kp F         &kp R         &kp U         &hmr RALT Y   &kp SEMI 
    // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
        &hml LCTRL A  &hml LALT L   &hml LGUI S   &hmls LSHFT T &kp K              &kp H         &hmrs RSHFT N &hmr RGUI E   &hmr LALT I   &hmr RCTRL O
    // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
        &kp Z         &kp X         &kp C         &kp V         &kp B              &kp W         &kp M         &kp SQT       &kp DOT       &kp COMMA
    // ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────╯
                                                  &lt 2 TAB     SMART_NUM          &lt 3 SPACE   &lt 3 RET  
    //                                           ╰─────────────┼─────────────┤    ├─────────────┼─────────────╯
    >;
    };

    default_layer_mac {
    bindings = <
    // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮    ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
        &kp Q         &hml RALT D   &kp J         &kp P         &kp G              &kp F         &kp R         &kp U         &hmr RALT Y   &kp SEMI 
    // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
        &hml LCTRL A  &hml LALT L   &hml LGUI S   &hmls LSHFT T &kp K              &kp H         &hmrs RSHFT N &hmr RGUI E   &hmr LALT I   &hmr RCTRL O
    // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
        &kp Z         &kp X         &kp C         &kp V         &kp B              &kp W         &kp M         &kp SQT       &kp DOT       &kp COMMA
    // ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────╯
                                                  &lt 2 TAB     SMART_NUM          &lt 3 SPACE   &lt 3 RET 
    //                                           ╰─────────────┼─────────────┤    ├─────────────┼─────────────╯
    >;
    };

    left_layer {
    bindings = <
    // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮    ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
        &trans        &trans        &trans        &trans        &trans             &trans        &trans        &trans        &trans        &trans
    // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
        &hml LCTRL N7 &hml LALT N5  &hml LGUI N3 &hmls LSHFT N1 &trans             &trans       &hmrs RSHFT N0 &hmr RGUI N2  &hmr LALT N4  &hmr RCTRL N6
    // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
        &trans        &trans        &trans        &kp N9        &trans             &trans        &kp N8        &trans        &trans        &trans
    // ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────╯
                                                  &mo 2         &trans             &kp SPACE     &lt 4 RET 
    //                                           ╰─────────────┼─────────────┤    ├─────────────┼─────────────╯
    >;
    };

    right_layer {
    bindings = <
    // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮    ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
        &trans        &trans        &trans        &trans        &trans             &trans        &trans        &kp UP        &trans        &trans
    // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
        &trans        &trans        &trans        &trans        &trans             &trans        &kp LEFT      &kp DOWN      &kp RIGHT     &trans
    // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
        &trans        &trans        &trans        &trans        &trans             &trans        &kp PAGE_UP   &trans        &kp PAGE_DOWN &trans
    // ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────╯
                                                  &mo 4         &kp LCTRL          &kp SPACE     &mo 3 
    //                                           ╰─────────────┼─────────────┤    ├─────────────┼─────────────╯
    >;
    };  

    tri_layer {
    bindings = <
    // ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮    ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
        &kp N1        &kp N2        &kp N3        &kp N4        &kp N5             &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_SEL 5
    // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
        &kp F1        &kp F2        &kp F3        &kp F4        &kp F5             &trans        &kp PG_UP     &kp K_VOL_UP  &kp K_MUTE    &trans 
    // ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
        &bt BT_CLR    &bt BT_NXT    &bt BT_PRV    &kp F6        &kp F7             &trans        &kp PG_DN     &kp K_VOL_DN  &trans        &trans   
    // ╰─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤    ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────╯
                                                  &trans        &trans             &trans        &trans 
        //                                       ╰─────────────┼─────────────┤    ├─────────────┼─────────────╯
    >;
    };
  };
};
